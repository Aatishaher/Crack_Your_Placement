class Solution {
public:
    void merge(int left, int right, vector<pair<int, int>> &v, vector<int> &ans) {
    if (left == right) {
        return;
    }
    int mid = (left + right) / 2;

    int i = 0;
    int j = 0;
    int leftSize = mid - left + 1;
    int rightSize = right - mid;
    
    vector<pair<int, int>> v1(leftSize);
    vector<pair<int, int>> v2(rightSize);

    for (int a = 0; a < leftSize; a++) {
        v1[a] = v[left + a];
    }
    for (int a = 0; a < rightSize; a++) {
        v2[a] = v[mid + 1 + a];
    }

    i = 0;
    j = 0;
    int k = left;

    while (i < leftSize && j < rightSize) {
        if (v1[i].second <= v2[j].second) {
            v[k] = v2[j];
            j++;
        } else {
            ans[v1[i].first] += (rightSize - j);
            v[k] = v1[i];
            i++;
        }
        k++;
    }

    while (i < leftSize) {
        v[k] = v1[i];
        i++;
        k++;
    }

    while (j < rightSize) {
        v[k] = v2[j];
        j++;
        k++;
    }
}
    void mergesort(int left,int right,vector<pair<int,int>> &v,vector<int> &ans){
        if(left==right){
            return;
        }
        int mid=(left+right)/2;
        mergesort(left,mid,v,ans);
        mergesort(mid+1,right,v,ans);
        merge(left,right,v,ans);


    }
    vector<int> countSmaller(vector<int>& nums) {
        vector<int> ans(nums.size(),0);
        vector<pair<int,int>> v;
        for(int i=0;i<nums.size();i++){
            v.push_back({i,nums[i]});
        }
        mergesort(0,nums.size()-1,v,ans);
        return ans;
    }
};
