class Solution {
  public:
    bool chk(string st){
        int s=0;
        int e=st.length()-1;
        while(s<e){
            if(st[s]!=st[e]){
                return 0;
            }
            s++;
            e--;
        }
        return 1;
    }
    void sol(int i,string s,vector<vector<string>> &ans,vector<string>&out){
        if(i==s.length()){
            ans.push_back(out);
        }
        
        for(int j=i;j<s.length();j++){
            if(chk(s.substr(i,j-i+1))){
                out.push_back(s.substr(i,j-i+1));
                sol(j+1,s,ans,out);
                out.pop_back();
            }
        }
    }
    vector<vector<string>> allPalindromicPerms(string S) {
        // code here
        vector<vector<string>> ans;
        vector<string> out;
        sol(0,S,ans,out);
        return ans;
    }
};

//{ Driver Code Starts.
int main() {
    int t;
    cin >> t;
    while (t--) {
        string S;
        
        cin>>S;

        Solution ob;
        vector<vector<string>> ptr = ob.allPalindromicPerms(S);
        
        for(int i=0; i<ptr.size(); i++)
        {
            for(int j=0; j<ptr[i].size(); j++)
            {
                cout<<ptr[i][j]<<" ";
            }
            cout<<endl;
        }
    }
    return 0;
}
};
