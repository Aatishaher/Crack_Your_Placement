class Solution {
public:
    class campare{
        public:
            bool operator()(ListNode*a,ListNode*b){
                return a->val>b->val;
            }
    };
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        priority_queue<ListNode*,vector<ListNode*>,campare> q;
        for(int i=0;i<lists.size();i++){
            if(lists[i]!=NULL)
                q.push(lists[i]);
        }
        ListNode* head=NULL;
        ListNode* tail=NULL;
        while(!q.empty()){
            ListNode* temp=q.top();
            q.pop();
            if(head==NULL){
                head=temp;
                tail=temp;
                if(tail->next!=NULL){
                    q.push(tail->next);
                }
            }
            else{
                tail->next=temp;
                tail=temp;
                if(tail->next!=NULL){
                    q.push(tail->next);
                }
            }
        }
        return head;
    }
};
