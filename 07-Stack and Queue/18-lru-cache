class LRUCache {
public:
    int size;
    class Node{
        public:
        int key;
        int val;
        Node* next;
        Node* prev;
        Node(int k,int v){
            this->key=k;
            this->val=v;
            this->next=NULL;
            this->prev=NULL;
        }
    };
    map<int,Node*> mp;
    Node* head;
    Node* tail;
    void latest(Node* n){
        n->prev->next=n->next;
        n->next->prev=n->prev;
        head->next->prev=n;
        n->next=head->next;
        n->prev=head;
        head->next=n;
    }
    LRUCache(int capacity) {
        size=capacity;
        head = new Node(0, 0);
        tail = new Node(0, 0);
        head->next = tail;
        tail->prev = head;
    }
    
    int get(int key) {
        if(mp.find(key)!=mp.end()){
            Node* n=mp[key];
            latest(n);
            return n->val;
        }
        else{
            return -1;
        }
    }
    
    void put(int key, int value) {
        if (mp.find(key) != mp.end()) {
            Node* n = mp[key];
            n->val = value;
            latest(n);
        } else {
            if (mp.size() == size) {
                Node* lru = tail->prev;
                mp.erase(lru->key);
                tail->prev = lru->prev;
                lru->prev->next = tail;
                delete lru;
            }
            Node* n = new Node(key, value);
            mp[key] = n;
            n->next = head->next;
            head->next->prev = n;
            head->next = n;
            n->prev = head;
    }
    }
};
