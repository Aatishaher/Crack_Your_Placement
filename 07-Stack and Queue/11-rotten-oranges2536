class Solution 
{
    public:
    //Function to find minimum time required to rot all oranges. 
    bool valid(int i,int j,int row,int col){
        if(i<0 || j<0 || i>=row || j>=col){
            return false;
        }
        return true;
    }
    void sol(int i,int j,int val,vector<vector<int>> &grid){
        if(valid(i+1,j,grid.size(),grid[0].size()) && grid[i+1][j]!=0 && (grid[i+1][j]>val+1 || grid[i+1][j]==1)){
            grid[i+1][j]=val+1;
            sol(i+1,j,val+1,grid);
        }
        if(valid(i-1,j,grid.size(),grid[0].size()) && grid[i-1][j]!=0 && (grid[i-1][j]>val+1 || grid[i-1][j]==1)){
            grid[i-1][j]=val+1;
            sol(i-1,j,val+1,grid);
        }
        if(valid(i,j+1,grid.size(),grid[0].size()) && grid[i][j+1]!=0 && (grid[i][j+1]>val+1 || grid[i][j+1]==1)){
            grid[i][j+1]=val+1;
            sol(i,j+1,val+1,grid);
        }
        if(valid(i,j-1,grid.size(),grid[0].size()) && grid[i][j-1]!=0 && (grid[i][j-1]>val+1 || grid[i][j-1]==1)){
            grid[i][j-1]=val+1;
            sol(i,j-1,val+1,grid);
        }
    }
    int orangesRotting(vector<vector<int>>& grid) {
        // Code here
        for(int i=0;i<grid.size();i++){
            for(int j=0;j<grid[0].size();j++){
                if(grid[i][j]==2){
                    sol(i,j,2,grid);
                }
            }
        }
        for(int i=0;i<grid.size();i++){
            for(int j=0;j<grid[0].size();j++){
                if(grid[i][j]==1){
                    return -1;
                }
            }
        }
        int ans=0;
        for(int i=0;i<grid.size();i++){
            for(int j=0;j<grid[0].size();j++){
                ans=max(ans,grid[i][j]);
            }
        }
        if(ans==0){
            return 0;
        }
        return ans-2;
    }
};
