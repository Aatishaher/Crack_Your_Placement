class Solution {
public:
    class Trie {
public:
    char ch;
    Trie* arr[26];
    int wordIndex; // Store the index of the word in the original list
    vector<int> palindromeSuffixIndices; // Store indices of words that are palindromes from current node
    bool ter;

    Trie(char c) {
        ch = c;
        ter = false;
        wordIndex = -1;
        for (int i = 0; i < 26; i++) {
            arr[i] = nullptr;
        }
    }
};

bool isPalindrome(const string& s, int left, int right) {
    while (left < right) {
        if (s[left++] != s[right--]) return false;
    }
    return true;
}

void insert(Trie* root, const string& s, int index) {
    Trie* temp = root;
    for (int i = 0; i < s.length(); i++) {
        char ch = s[i];
        if (temp->arr[ch - 'a'] == nullptr) {
            temp->arr[ch - 'a'] = new Trie(ch);
        }
        if (isPalindrome(s, i, s.length() - 1)) {
            temp->palindromeSuffixIndices.push_back(index);
        }
        temp = temp->arr[ch - 'a'];
    }
    temp->ter = true;
    temp->wordIndex = index;
}

void search(Trie* root, const string& word, int index, vector<vector<int>>& ans) {
    Trie* temp = root;
    for (int i = 0; i < word.length(); i++) {
        if (temp->wordIndex >= 0 && temp->wordIndex != index && isPalindrome(word, i, word.length() - 1)) {
            ans.push_back({index, temp->wordIndex});
        }
        temp = temp->arr[word[i] - 'a'];
        if (temp == nullptr) return;
    }

    if (temp->wordIndex >= 0 && temp->wordIndex != index) {
        ans.push_back({index, temp->wordIndex});
    }

    for (int palindromeIndex : temp->palindromeSuffixIndices) {
        if (index != palindromeIndex) {
            ans.push_back({index, palindromeIndex});
        }
    }
}

vector<vector<int>> palindromePairs(vector<string>& words) {
    vector<vector<int>> ans;
    Trie* root = new Trie('-');
    
    for (int i = 0; i < words.size(); i++) {
        string s = words[i];
        reverse(s.begin(), s.end());
        insert(root, s, i);
    }
    
    for (int i = 0; i < words.size(); i++) {
        search(root, words[i], i, ans);
    }
    
    return ans;
}

};
