class Solution {
public:
    int b(vector<int>& nums,int target,int s,int e){
        while(s<=e){
            int m=(s+e)/2;
            if(nums[m]==target){
                return m;
            }
            else if(nums[m]<target){
                s=m+1;
            }
            else{
                e=m-1;
            }
        }
        return -1;
    }
    int search(vector<int>& nums, int target) {
        int s=0;
        int pivot;
        int e=nums.size()-1;
        while(s<=e){
            int m=(s+e)/2;
            cout<<m;
            if(s==e){
                pivot=s;
                break;
            }
            if((m-1)>=0 && nums[m]<nums[m-1]){
                pivot=m-1;
                break;
            }
            else if((m+1)<nums.size() && nums[m]>nums[m+1]){
                pivot=m;
                break;
            }
            else if(nums[m]<nums[s] ){
                e=m-1;
            }
            else{
                s=m+1;
            }
        }
        if(nums[0]<nums[nums.size()-1] || nums.size()==1){
            return b(nums,target,0,nums.size()-1);
        }
        //cout<<pivot;
        if(target>=nums[0]){
            return b(nums,target,0,pivot);
        }
        return b(nums,target,pivot+1,nums.size()-1);
    }
};
