class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        deque<int> q;
        vector<int> ans;
        if(k==1){
            return nums;
        }
        for(int i=0;i<k;i++){
            if(!q.empty() && nums[q.front()]<nums[i]){
                while(!q.empty()){
                    q.pop_front();
                }
           }
           else{
                while(!q.empty() && nums[q.back()]<nums[i]){
                    q.pop_back();
                }
            }
        q.push_back(i);
        }
        ans.push_back(nums[q.front()]);
        int j=k;
        while(j<nums.size()){
            if(nums[q.front()]<nums[j] && !q.empty()){
                 while(!q.empty()){
                     q.pop_front();
                }
            }
            else if(q.front()+k==j){
                q.pop_front();
                if(nums[q.front()]<nums[j] && !q.empty()){
                 while(!q.empty()){
                     q.pop_front();
                    }
                }
            }
            while(!q.empty() && nums[q.back()]<nums[j]){
                    q.pop_back();
            }
            q.push_back(j);
            j++;
            ans.push_back(nums[q.front()]);
        }
        return ans;
    }
};
