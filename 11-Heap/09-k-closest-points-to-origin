class Solution {
public:
    class info{
        public:
        pair<int,int> p;
        int d;
        info(pair<int,int> p,int d){
            this->d=d;
            this->p=p;
        }
    };
    class comapre{
        public:
        bool operator()(info a,info b){
            return a.d>b.d;
        }
    };
    vector<vector<int>> kClosest(vector<vector<int>>& points, int k) {
        vector<vector<int>> ans;
        priority_queue<info, vector<info>,comapre> q;
        for (int i = 0; i < points.size(); i++) {
        int distance = points[i][0] * points[i][0] + points[i][1] * points[i][1];
        info a(make_pair(points[i][0], points[i][1]), distance);
        q.push(a);
        }
        while(k--){
            vector<int> out;
            out.push_back(q.top().p.first);
            out.push_back(q.top().p.second);
            ans.push_back(out);
            q.pop();
        }
        return ans;
    }
};
