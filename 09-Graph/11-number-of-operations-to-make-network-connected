class Solution {
public:
    void dfs(int i,vector<vector<int>> &adj,vector<bool> &visit){
        visit[i]=1;
        for(auto neb:adj[i]){
            if(visit[neb]==0){
                dfs(neb,adj,visit);
            }
        }
    }
    int makeConnected(int n, vector<vector<int>>& conn) {
        if(conn.size()+1<n){
            return -1;
        }
        vector<vector<int>> adj(n+1);
        for(int i=0;i<conn.size();i++){
            adj[conn[i][0]].push_back(conn[i][1]);
            adj[conn[i][1]].push_back(conn[i][0]);
        }
        int ans=0;
        vector<bool> visit(n,0);
        for(int i=0;i<n;i++){
            if(visit[i]==0){
                dfs(i,adj,visit);
                ans++;
            }
        }
        
        return ans-1;
    }
};
