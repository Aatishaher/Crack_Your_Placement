class Solution {
  public:
    // Function to detect cycle in an undirected graph.
    bool isCycle(int V, vector<int> adj[]) {
        // Code here
        vector<int>visit(V,0);
        queue<pair<int,int>> q;
        for(int i=0;i<V;i++){
            if(visit[i]==0){
                q.push({i,-1});
                visit[i]=1;
                while(!q.empty()){
                    auto top=q.front();
                    q.pop();
                    for(auto neb:adj[top.first]){
                        if(neb!=top.second && visit[neb]==1){
                            return true;
                        }
                        if(neb!=top.second){
                            q.push({neb,top.first});
                            visit[neb]=1;
                        }
                    }
                }
            }
        }
        return false;
    }
};
