class Solution {
public:
    bool vaild(int i,int j,int row,int col){
        if(i<0 || j<0 || i>=row || j>=col){
            return 0;
        }
        return 1;
    }
    int maxDistance(vector<vector<int>>& grid) {
        int ans=-1;
        int row=grid.size();
        int col=grid[0].size();
        for(int i=0;i<grid.size();i++){
            for(int j=0;j<grid[0].size();j++){
                if(grid[i][j]==1){
                    queue<pair<int,int>> q;
                    q.push({i,j});
                    while(!q.empty()){
                        int x=q.front().first;
                        int y=q.front().second;
                        int n=grid[x][y]+1;
                        q.pop();
                        if(vaild(x+1,y,row,col) && (grid[x+1][y]==0 || n<grid[x+1][y])){
                            grid[x+1][y]=n;
                            q.push({x+1,y});
                        }
                        if(vaild(x-1,y,row,col) && (grid[x-1][y]==0 || n<grid[x-1][y])){
                            q.push({x-1,y});
                            grid[x-1][y]=n;
                        }
                        if(vaild(x,y+1,row,col) && (grid[x][y+1]==0 || n<grid[x][y+1])){
                            q.push({x,y+1});
                            grid[x][y+1]=n;
                        }
                        if(vaild(x,y-1,row,col) && (grid[x][y-1]==0 || n<grid[x][y-1])){
                            q.push({x,y-1});
                            grid[x][y-1]=n;
                        }
                    }
                }
            }
        }
        for(int i=0;i<grid.size();i++){
            for(int j=0;j<grid[0].size();j++){
                ans=max(ans,grid[i][j]);
            }
        }
        if(ans==1 || ans==0){
            return -1;
        }
        return ans-1;
    }
};
