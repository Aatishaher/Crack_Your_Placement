// User function template for C++

class Solution {
  public:
    bool valid(int i,int j,int n){
        if(i<0 || j<0 || i>=n || j>=n){
            return false;
        }
        return true;
    }
    void dfs(int i,int j,string &out,vector<string> &ans,vector<vector<int>> &nums,int &n){
        if(i==n-1 && j==n-1){
            //string temp=out;
            //reverse(out.begin(),out.end());
            ans.push_back(out);
            return;
        }
        nums[i][j]=0;
        if(valid(i+1,j,n) && nums[i+1][j]==1){
            out.push_back('D');
            dfs(i+1,j,out,ans,nums,n);
            out.pop_back();
        }
        if(valid(i-1,j,n) && nums[i-1][j]==1){
            out.push_back('U');
            dfs(i-1,j,out,ans,nums,n);
            out.pop_back();
        }
        if(valid(i,j+1,n) && nums[i][j+1]==1){
            out.push_back('R');
            dfs(i,j+1,out,ans,nums,n);
            out.pop_back();
        }
        if(valid(i,j-1,n) && nums[i][j-1]==1){
            out.push_back('L');
            dfs(i,j-1,out,ans,nums,n);
            out.pop_back();
        }
        nums[i][j]=1;
        
        
    }
    vector<string> findPath(vector<vector<int>> &mat) {
        // Your code goes here
        int n=mat.size();
        vector<string> ans;
        if(mat[0][0]==0 || mat[n-1][n-1]==0){
            //cout<<"hi";
            ans.push_back("-1");
            return ans;
        }
        string out="";
        dfs(0,0,out,ans,mat,n);
        return ans;
        
    }
};
