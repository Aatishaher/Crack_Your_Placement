class Solution
{
	public:
	//Function to find number of strongly connected components in the graph.
	stack<int> exp;
	void DFS(int node, vector<int>& vis, stack<int>&st, vector<vector<int>>& adj){
        vis[node] = 1;
        for(auto e:adj[node]){
            if(vis[e] == 0){
                DFS(e,vis, st, adj);
            }
        }
        st.push(node);
    }
    int kosaraju(int V, vector<vector<int>>& adj)
    {
        int count = 0;
        vector<int> vis(V, 0);
        vector<int> arr[V];
        stack<int> st;
                
        for(int i=0; i<V; i++){
            if(vis[i] == 0)
            DFS(i, vis, st, adj);
        }
        
        for(int i=0; i<adj.size(); i++){
            for(int k=0; k<adj[i].size(); k++){
                arr[adj[i][k]].push_back(i);
            }
        }
        
        vector<int> visited(V, 0);

         while(!st.empty()){
         int i = st.top();
         st.pop();
            if(visited[i] == 0){
                count++;
                DFS_T(i, visited, arr);
            }
        }
        return count;
    }
    
    
    
    void DFS_T(int i, vector<int>& visited, vector<int> adj[]){
        stack<int> st;
        st.push(i);
        visited[i] = 1;
        while(!st.empty()){
            int node = st.top();
            st.pop();
            for(int k=0; k<adj[node].size(); k++){
                if(visited[adj[node][k]] == 0){
                    st.push(adj[node][k]);
                    visited[adj[node][k]] = 1;
                }
            }
        }
    }
};
