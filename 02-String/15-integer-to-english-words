class Solution {
public:
    //copy


    map<int, string> below20 = {
    {1, "One"}, {2, "Two"}, {3, "Three"}, {4, "Four"}, {5, "Five"},
    {6, "Six"}, {7, "Seven"}, {8, "Eight"}, {9, "Nine"}, {10, "Ten"},
    {11, "Eleven"}, {12, "Twelve"}, {13, "Thirteen"}, {14, "Fourteen"}, {15, "Fifteen"},
    {16, "Sixteen"}, {17, "Seventeen"}, {18, "Eighteen"}, {19, "Nineteen"}
};

map<int, string> tens = {
    {20, "Twenty"}, {30, "Thirty"}, {40, "Forty"}, {50, "Fifty"},
    {60, "Sixty"}, {70, "Seventy"}, {80, "Eighty"}, {90, "Ninety"}
};

map<int, string> thousands = {
    {1, "Thousand"}, {2, "Million"}, {3, "Billion"}
};

string helper(int num) {
    if (num == 0) return "";
    else if (num < 20) return below20[num] + " ";
    else if (num < 100) return tens[num / 10 * 10] + " " + helper(num % 10);
    else return below20[num / 100] + " Hundred " + helper(num % 100);
}

string numberToWords(int nums) {
    if (nums == 0) return "Zero";

    string ans;
    int i = 0;

    while (nums > 0) {
        if (nums % 1000 != 0) {
            ans = helper(nums % 1000) + (i > 0 ? thousands[i] + " " : "") + ans;
        }
        nums /= 1000;
        i++;
    }

    while (ans.back() == ' ') {
        ans.pop_back();
    }

    return ans;
}
};
